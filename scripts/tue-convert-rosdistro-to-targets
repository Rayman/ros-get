#!/usr/bin/env python

import os
from collections import OrderedDict

import tue_get
import yaml
from rosdistro import get_index, get_index_url, get_cached_distribution
from yaml import dump

data_path = os.path.join(os.path.dirname(tue_get.__file__), '..', '..', 'data', 'tue-env')
target_path = os.path.join(data_path, 'installer', 'targets')

distroname = 'tuekinetic'
index = get_index(get_index_url())
distro = get_cached_distribution(index, distroname)


class UnsortableList(list):
    def sort(self, *args, **kwargs):
        pass


class UnsortableOrderedDict(OrderedDict):
    def items(self, *args, **kwargs):
        return UnsortableList(OrderedDict.items(self, *args, **kwargs))


yaml.add_representer(UnsortableOrderedDict, yaml.representer.SafeRepresenter.represent_dict)

for package in distro.source_packages.values():
    print 'generating targets for', package.name
    repository = distro.repositories[package.repository_name]

    data = UnsortableOrderedDict({'type': 'ros'})
    source = UnsortableOrderedDict(repository.get_data()['source'])

    # reorder keys
    source['url'] = source.pop('url')

    data['source'] = source
    del data['source']['version']

    # look for other packages in the same repo
    for other_package in distro.source_packages.values():
        if package == other_package:
            # skip yourself
            continue
        if repository == distro.repositories[other_package.repository_name]:
            print '\tmultiple packages found in this repo'
            data['source']['sub-dir'] = package.name
            break

    data = [data]

    tue_get.mkdir_p(os.path.join(target_path, 'ros-' + package.name))
    with open(os.path.join(target_path, 'ros-' + package.name, 'install.yaml'), 'w') as f:
        dump(data, f, default_flow_style=False)
