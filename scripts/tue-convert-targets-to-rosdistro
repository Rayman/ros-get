#!/usr/bin/env python
from __future__ import print_function

import os

import tue_get
from tue_get import get_rosdep
from yaml import load, dump


def parse_ros_source(type, url, subdir=None, **kwargs):
    if kwargs:
        raise ValueError('unexpected kwargs')

    print('\tsource:', type, url)

    if type == 'git':
        return {
            'source': {
                'type': type,
                'url': url,
                'version': 'master',
            }
        }
    else:
        return {
            # 'source': {
            #     'type': type,
            #     'url': url,
            # }
        }


def parse_ros_system(type, name, **kwargs):
    if kwargs:
        raise ValueError('Unexpected kwargs')

    return {
        'rosname': name
    }
    # print('\trossystem:', name)


def parse_ros_target(type, source, **kwargs):
    if kwargs:
        raise ValueError('Unexpected kwargs')

    if source['type'] == 'system':
        return parse_ros_system(**source)
    elif source['type'] == 'git' or source['type'] == 'svn':
        if 'sub-dir' in source:
            source['subdir'] = source.pop('sub-dir')
        return parse_ros_source(**source)
    else:
        raise ValueError('Unknown source type')


def parse_system_target(type, name, **kwargs):
    if kwargs:
        raise ValueError('Unexpected kwargs')

    return {
        'systemname': name
    }


def parse_target_source(target):
    if len(target) == 1:
        target = target[0]

        if target['type'] == 'ros':
            return target['type'], parse_ros_target(**target)
        elif target['type'] == 'system':
            return target['type'], parse_system_target(**target)
        elif target['type'] == 'target':
            print('\tmetatarget', target)
        elif target['type'] == 'ros-rosbuild':
            print('\trosbuild target')
        else:
            raise ValueError('unknown target type')
    else:
        print('\tmultiple targets found')

    return None, None


def parse_tue_install_ros(command, type, url, subdir=None, version='master', *args):
    if args:
        raise ValueError('Unexpected args')

    if type == 'git':
        return 'ros', {
            'source': {
                'type': type,
                'url': url,
                'version': version,
            }
        }
    else:
        return 'ros', {
            # 'source': {
            #     'type': type,
            #     'url': url,
            # }
        }


def parse_target_bash(f):
    lines = f.splitlines()
    if len(lines) == 1:
        line = lines[0]
        if line.startswith('tue-install-ros'):
            return parse_tue_install_ros(*line.split(' '))
        else:
            print('\tunknown setup.bash')
    else:
        print('\tunknown setup.bash found')
    return None, None


def parse_target(path):
    try:
        with open(os.path.join(path, 'install.yaml')) as f:
            target = load(f)
            ret = parse_target_source(target)
            if os.path.isfile(os.path.join(path, 'install.bash')):
                print('\twarn: also install.bash found')
            return ret
    except IOError:
        pass
    try:
        with open(os.path.join(path, 'install.bash')) as f:
            return parse_target_bash(f.read())
    except IOError:
        pass

    print('\tno target found')
    return None, None


if __name__ == '__main__':
    data_path = os.path.join(os.path.dirname(tue_get.__file__), '..', '..', 'data', 'tue-env')
    target_path = os.path.join(data_path, 'installer', 'targets')

    targets = (os.path.join(target_path, o) for o in os.listdir(target_path))
    targets = (t for t in targets if os.path.isdir(t))

    repositories = {}
    rosdep = {}

    for target in targets:
        basename = os.path.basename(target)
        print('parsing', basename)
        t, output = parse_target(target)

        if not t:
            pass
        elif t == 'ros':
            if 'rosname' in output:
                print('\trosdep', output['rosname'])
                continue

            if not output:
                print('\tskipping empty response')
                continue

            assert basename.startswith('ros-')

            if get_rosdep(basename[4:]):
                print('\tdetected forked package')

            url = output['source']['url']
            if url.endswith('.git'):
                url = url[:-4]

            _, _, last = url.rpartition('/')
            basename = last

            if basename in repositories:
                if repositories[basename]['source'] != output['source']:
                    raise ValueError('different source found for package' % basename)
            else:
                repositories[basename] = output
        elif t == 'system':
            if basename.startswith('ros-'):
                basename = basename[4:]

            dep = get_rosdep(basename)
            if dep:
                rule_installer, rule = dep

                if rule_installer == 'apt':
                    if isinstance(rule, dict):
                        rule = rule['packages']

                    if isinstance(rule, list):
                        if rule[0] == output['systemname']:
                            print('\tsystemdep ok')
                        else:
                            print('\twrong systemdep', output['systemname'], rule_installer, rule)
                    else:
                        print('\twrong systemdep', output['systemname'], rule_installer, rule)
                else:
                    print('\twrong systemdep', output['systemname'], rule_installer, rule)
            else:
                rosdep[basename] = 'apt'
                print('\tno systemdep found', basename)
        else:
            raise ValueError()

    # patch distro file
    repositories['executive_smach']['source']['version'] = 'indigo-devel'
    repositories['scan_tools']['source']['version'] = 'indigo'
    repositories['navigation_layers']['source']['version'] = 'indigo'
    repositories['navigation']['source']['version'] = 'hydro-devel'
    repositories['tue_metapackages'] = {
        'source': {
            'type': 'git',
            'url': 'https://github.com/Rayman/tue_metapackages.git',
            'version': 'master',
        }
    }

    with open(os.path.join(os.path.dirname(tue_get.__file__), '..', '..', 'data', 'distro.template')) as f:
        template = f.read()

    d = dump({'repositories': repositories}, default_flow_style=False)
    distro = template.format(repositories=d)

    # write distro file
    distro_file = os.path.join(os.path.dirname(tue_get.__file__), '..', '..', 'rosdistro', 'kinetic',
                               'distribution.yaml')
    with open(distro_file, 'w') as f:
        f.write(distro)

    print('new rosdeps:', rosdep)
    print('Done!')
