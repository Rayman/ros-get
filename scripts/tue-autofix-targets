#!/usr/bin/env python
import fnmatch
import os
from collections import OrderedDict

import tue_get
import yaml

data_path = os.path.join(os.path.dirname(tue_get.__file__), '..', '..', 'data', 'tue-env')
target_path = os.path.join(data_path, 'installer', 'targets')

matches = []
for root, dirnames, filenames in os.walk(target_path):
    for filename in fnmatch.filter(filenames, '*.yaml'):
        matches.append(os.path.join(root, filename))


class UnsortableList(list):
    def sort(self, *args, **kwargs):
        pass


class UnsortableOrderedDict(OrderedDict):
    def items(self, *args, **kwargs):
        return UnsortableList(OrderedDict.items(self, *args, **kwargs))


yaml.add_representer(UnsortableOrderedDict, yaml.representer.SafeRepresenter.represent_dict)

key_order = ['type', 'name']

for m in matches:
    print 'autofixing', m
    with open(m, 'r+') as f:
        y = yaml.load(f)

        new_targets = []
        for t in y:
            new_target = UnsortableOrderedDict()
            try:
                new_target['type'] = t.pop('type')
            except KeyError:
                pass
            try:
                new_target['name'] = t.pop('name')
            except KeyError:
                pass
            try:
                source = t.pop('source')

                new_source = UnsortableOrderedDict()
                try:
                    new_source['type'] = source.pop('type')
                except KeyError:
                    pass
                try:
                    new_source['url'] = source.pop('url')
                except KeyError:
                    pass
                new_source.update(source)

                new_target['source'] = new_source
            except KeyError:
                pass

            new_target.update(t)
            new_targets.append(new_target)

        f.seek(0)
        f.write(yaml.dump(new_targets, default_flow_style=False))
        f.truncate()
